#define matchPoint 11;
#define winPoint 4;
var serve_counter = 0;

enum{ml, fzd, na};

var turn = na; //serve turn;
var wonGame = na;
var wonSet = na;

var ball = 5;

// Scores //
var mlScore = 0;
var fzdScore = 0;

// Set points // 
var mlSetPoint = 0;
var fzdSetPoint = 0;

var currSetServer = na;

// High level
MatchPt = [mlSetPoint == 0 && fzdSetPoint == 0] InitiateGame;
InitiateGame = whoServeFirst; (mlServe [] fzdServe);
whoServeFirst = []i:{ml, fzd}@TossCoin{if (i == ml) {turn = ml; serve_counter = 0; currSetServer = ml} else {turn = fzd; serve_counter = 2; currSetServer= fzd;}} -> Skip;

// Low level
////////////////
// RESET HERE (BELOW)
#define setNextServer {if (wonSet == ml) {
			mlSetPoint++;
		} else {
			fzdSetPoint++;
		};
		if (mlSetPoint == winPoint) {
			wonGame = ml;
		} else if (fzdSetPoint == winPoint) {
			wonGame = fzd;
		};
		if (currSetServer == ml) {
			turn = fzd; serve_counter = 2; currSetServer = fzd; wonSet= na;
		} else {
			turn = ml; serve_counter = 0; currSetServer = ml; wonSet = na;
		}
		mlScore = 0; 
		fzdScore = 0;
		};
		
nextSetGame = {setNextServer;} -> if (wonGame != na) {Skip} else if (turn == ml) {mlServe} else {fzdServe};
mlServe = [wonSet == na && (turn == ml) && wonGame == na] mlReady_serve -> mlServeGame;
fzdServe = [wonSet == na && (turn == fzd) && wonGame == na] fzdReady_serve -> fzdServeGame; 
NextPt = if (wonSet != na) {nextSetGame} else if (turn == ml) {mlServe} else {fzdServe};

#define determineSetWinner(i) {if (i == 0 && (fzdScore == matchPoint && fzdScore != mlScore + 1) || (fzdScore > matchPoint && fzdScore - mlScore >= 2)) { // If fzd reach 11 and ML does not reach 10 yet
			wonSet = fzd;
		} else if ((mlScore == matchPoint && fzdScore + 1 != mlScore) || (mlScore > matchPoint && mlScore - fzdScore >= 2)) { // If ml reach 11 and fzd does not reach 10 yet
			wonSet = ml;
		}};
		
#define determineNextServer(i) {call(determineSetWinner, i); if (wonSet == na) {
		if ((fzdScore >= matchPoint - 1 && fzdScore - mlScore < 2) || (mlScore >= matchPoint -1 && mlScore - fzdScore < 2)) {
			if (turn == ml) {
				turn = fzd;
			} else {
				turn = ml;
			}
		}
		else {
			if (serve_counter % 4 == 0 || (serve_counter % 4 == 1) ) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		}};
		
// MA LONG SECTION
//Ma Long Serve Actions
mlServeGame() = pcase{
	46: mlServeActionPosThreeForehand
	0: mlServeActionPosThreeBackhand
	77: mlServeActionPosFourForehand
	8: mlServeActionPosFourBackhand
};

mlServeActionPosThreeForehand = pcase {
	40: serveSuccFHToss{ball = 3; serve_counter++} -> fzdRallyActions
	2: serveSuccFHPend{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccFHBackSpin{ball = 3; serve_counter++} -> fzdRallyActions
	4: serveSuccFHReversePend{ball = 3; serve_counter++} -> fzdRallyActions
	
	0: serveFailFHToss{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHPend{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlServeActionPosThreeBackhand = pcase {
	0: serveSuccBHToss{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccBHPend{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccBHBackSpin{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccBHReversePend{ball = 3; serve_counter++} -> fzdRallyActions
	
	0: serveFailBHToss{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHPend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlServeActionPosFourForehand = pcase {
	68: serveSuccFHToss{ball = 4; serve_counter++} -> fzdRallyActions
	2: serveSuccFHPend{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccFHBackSpin{ball = 4; serve_counter++} -> fzdRallyActions
	6: serveSuccFHReversePend{ball = 4; serve_counter++} -> fzdRallyActions
	
	1: serveFailFHToss{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHPend{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlServeActionPosFourBackhand = pcase {
	8: serveSuccBHToss{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccBHPend{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccBHBackSpin{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccBHReversePend{ball = 4; serve_counter++} -> fzdRallyActions
	
	0: serveFailBHToss{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHPend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

// Ma Long Rally Actions

//ML hit to Pos 3 using forehand
mlRallyActionsPosThreeForehand = pcase {
	36: attack -> mlRallyAttackActionsPosThreeForehand
	67: defense -> mlRallyDefensiveActionsPosThreeForehand
};

mlRallyAttackActionsPosThreeForehandFail = pcase {
	0: attFailFHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	9: attFailFHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: attFailFHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: attFailFHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosThreeForehandFail = pcase {
	1: defFailFHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	24: defFailFHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: defFailFHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: defFailFHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosThreeForehand = pcase {
	15: attSuccFHLoop{ball=3} -> fzdRallyActions
	19: attSuccFHDrive{ball=3} -> fzdRallyActions
	2: attSuccFHFlick{ball=3} -> fzdRallyActions
	0: attSuccFHSmash{ball=3} -> fzdRallyActions
	13: mlRallyAttackActionsPosThreeForehandFail
};

mlRallyDefensiveActionsPosThreeForehand = pcase {
	8: defSuccFHBlock{ball=3} -> fzdRallyActions
	7: defSuccFHChop{ball=3} -> fzdRallyActions
	23: defSuccFHPush{ball=3} -> fzdRallyActions
	0: defSuccFHLob{ball=3} -> fzdRallyActions
	29: mlRallyDefensiveActionsPosThreeForehandFail
};

//ML hit to Pos 3 using backhand
mlRallyActionsPosThreeBackhand = pcase {
	133: attack -> mlRallyAttackActionsPosThreeBackhand
	81: defense -> mlRallyDefensiveActionsPosThreeBackhand
};

mlRallyAttackActionsPosThreeBackhandFail = pcase {
	4: attFailBHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	5: attFailBHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: attFailBHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: attFailBHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosThreeBackhandFail = pcase {
	0: defFailBHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: defFailBHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: defFailBHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailBHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosThreeBackhand = pcase {
	27: attSuccBHLoop{ball=3} -> fzdRallyActions
	22: attSuccBHDrive{ball=3} -> fzdRallyActions
	71: attSuccBHFlick{ball=3} -> fzdRallyActions
	1: attSuccBHSmash{ball=3} -> fzdRallyActions
	12: mlRallyAttackActionsPosThreeBackhandFail
};

mlRallyDefensiveActionsPosThreeBackhand = pcase {
	19: defSuccBHChop{ball=3} -> fzdRallyActions
	27: defSuccBHBlock{ball=3} -> fzdRallyActions
	31: defSuccBHPush{ball=3} -> fzdRallyActions
	0: defSuccBHLob{ball=3} -> fzdRallyActions
	4: mlRallyDefensiveActionsPosThreeBackhandFail
};

//ML hit to Pos 4 using forehand
mlRallyActionsPosFourForehand = pcase {
	60: attack -> mlRallyAttackActionsPosFourForehand
	73: defense -> mlRallyDefensiveActionsPosFourForehand
};

mlRallyAttackActionsPosFourForehandFail = pcase {
	2: attFailFHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	6: attFailFHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	4: attFailFHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	4: attFailFHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosFourForehandFail = pcase {
	0: defFailFHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	2: defFailFHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	4: defFailFHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailFHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosFourForehand = pcase {
	15: attSuccFHLoop{ball=4} -> fzdRallyActions
	11: attSuccFHDrive{ball=4} -> fzdRallyActions
	9: attSuccFHFlick{ball=4} -> fzdRallyActions
	9: attSuccFHSmash{ball=4} -> fzdRallyActions
	16: attFailFH{ball=5} -> mlRallyAttackActionsPosFourForehandFail
};

mlRallyDefensiveActionsPosFourForehand = pcase {
	23: defSuccFHBlock{ball=4} -> fzdRallyActions
	6: defSuccFHChop{ball=4} -> fzdRallyActions
	37: defSuccFHPush{ball=4} -> fzdRallyActions
	1: defSuccFHLob{ball=4} -> fzdRallyActions
	6: defFailFH{ball=5} -> mlRallyDefensiveActionsPosFourForehandFail
};

//ML hit to Pos 4 using backhand
mlRallyActionsPosFourBackhand = pcase {
	53: attack -> mlRallyAttackActionsPosFourBackhand
	68: defense -> mlRallyDefensiveActionsPosFourBackhand
};

mlRallyAttackActionsPosFourBackhandFail = pcase {
	5: attFailBHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	17: attFailBHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: attFailBHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	7: attFailBHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosFourBackhandFail = pcase {
	4: defFailFHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	13: defFailFHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	7: defFailFHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailFHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosFourBackhand = pcase {
	12:  attSuccBHLoop{ball=4} -> fzdRallyActions
	10:  attSuccBHFlick{ball=4} -> fzdRallyActions
	1:  attSuccBHSmash{ball=4} -> fzdRallyActions
	0:  attSuccBHDrive{ball=4} -> fzdRallyActions
	30: attFailBH{ball=5} -> mlRallyAttackActionsPosFourBackhandFail
};

mlRallyDefensiveActionsPosFourBackhand = pcase {
	12: defSuccBHChop{ball=4} -> fzdRallyActions
	8: defSuccBHBlock{ball=4} -> fzdRallyActions
	22: defSuccBHPush{ball=4} -> fzdRallyActions
	2: defSuccBHLob{ball=4} -> fzdRallyActions
	24: defFailBH{ball=5} -> mlRallyDefensiveActionsPosFourBackhandFail
};

mlRallyActions = pcase {
	103: PosThree -> mlRallyActionsPosThreeForehand
	214: PosThree -> mlRallyActionsPosThreeBackhand
	133: PosFour -> mlRallyActionsPosFourForehand
	121: PosFour -> mlRallyActionsPosFourBackhand
};

// ZE DONG SECTION
// Ze Dong Serve Actions
fzdServeGame() = pcase{
	57: fzdServeActionsPosOneForehand
	0: fzdServeActionsPosOneBackhand
	78: fzdServeActionsPosTwoForehand
	1: fzdServeActionsPosTwoBackhand
};

fzdServeActionsPosOneForehand = pcase {
	0: serveSuccFHToss{ball = 1; serve_counter++} -> mlRallyActions
	23: serveSuccFHReversePend{ball = 1; serve_counter++} -> mlRallyActions
	32: serveSuccFHPend{ball = 1; serve_counter++} -> mlRallyActions
	2: serveSuccFHBackSpin{ball = 1; serve_counter++} -> mlRallyActions
	
	0: serveFailFHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdServeActionsPosOneBackhand = pcase {
	0: serveSuccBHToss{ball = 1; serve_counter++} -> mlRallyActions
	0: serveSuccBHReversePend{ball = 1; serve_counter++} -> mlRallyActions
	0: serveSuccBHPend{ball = 1; serve_counter++} -> mlRallyActions
	0: serveSuccBHBackSpin{ball = 1; serve_counter++} -> mlRallyActions
	
	0: serveFailBHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHBackSpin{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHReversePend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdServeActionsPosTwoForehand = pcase {
	0: serveSuccFHToss{ball = 2; serve_counter++} -> mlRallyActions
	31: serveSuccFHReversePend{ball = 2; serve_counter++} -> mlRallyActions
	45: serveSuccFHPend{ball = 2; serve_counter++} -> mlRallyActions
	2: serveSuccFHBackSpin{ball = 2; serve_counter++} -> mlRallyActions
	
	0: serveFailFHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdServeActionsPosTwoBackhand = pcase {
	0: serveSuccBHToss{ball = 2; serve_counter++} -> mlRallyActions
	0: serveSuccBHReversePend{ball = 2; serve_counter++} -> mlRallyActions
	1: serveSuccBHPend{ball = 2; serve_counter++} -> mlRallyActions
	0: serveSuccBHBackSpin{ball = 2; serve_counter++} -> mlRallyActions
	
	0: serveFailBHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHBackSpin{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHReversePend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

//FZD hit to Pos 1 using forehand
fzdRallyActionsPosOneForehand = pcase {
	60: attack -> fzdRallyAttackActionsPosOneForehand
	34: defense -> fzdRallyDefensiveActionsPosOneForehand
};

fzdRallyAttackActionsPosOneForehandFail = pcase {
	4: attFailFHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	5: attFailFHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: attFailFHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	4: attFailFHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosOneForehandFail = pcase {
	2: defFailBHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: defFailBHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: defFailBHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosOneForehand = pcase {
	20:  attSuccFHLoop{ball=1} -> mlRallyActions
	9:  attSuccFHDrive{ball=1} -> mlRallyActions
	4:  attSuccFHFlick{ball=1} -> mlRallyActions
	12:  attSuccFHSmash{ball=1} -> mlRallyActions
	15: attFailFH{ball=5} -> fzdRallyAttackActionsPosOneForehandFail
};

fzdRallyDefensiveActionsPosOneForehand = pcase {
	14: defSuccFHBlock{ball=1} -> mlRallyActions
	5: defSuccFHChop{ball=1} -> mlRallyActions
	11: defSuccFHPush{ball=1} -> mlRallyActions
	0: defSuccFHLob{ball=1} -> mlRallyActions
	4: defFailFH{ball=5} -> fzdRallyDefenseActionsPosOneForehandFail
};

//FZD hit to Pos 1 using backhand
fzdRallyActionsPosOneBackhand = pcase {
	56: attack -> fzdRallyAttackActionsPosOneBackhand
	52: defense -> fzdRallyDefensiveActionsPosOneBackhand
};

fzdRallyAttackActionsPosOneBackhandFail = pcase {
	19: attFailBHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	8: attFailBHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: attFailBHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosOneBackhandFail = pcase {
	11: defFailBHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	12: defFailBHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: defFailBHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: defFailBHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosOneBackhand = pcase {
	5:  attSuccBHLoop{ball=1} -> mlRallyActions
	5:  attSuccBHDrive{ball=1} -> mlRallyActions
	17:  attSuccBHFlick{ball=1} -> mlRallyActions
	0:  attSuccBHSmash{ball=1} -> mlRallyActions
	29: attFailBH{ball=5} -> fzdRallyAttackActionsPosOneBackhandFail
};

fzdRallyDefensiveActionsPosOneBackhand = pcase {
	2: defSuccBHBlock{ball=1} -> mlRallyActions
	2: defSuccBHChop{ball=1} -> mlRallyActions
	22: defSuccBHPush{ball=1} -> mlRallyActions
	0: defSuccBHLob{ball=1} -> mlRallyActions
	26: defFailBH{ball=5} -> fzdRallyDefenseActionsPosOneBackhandFail
};

//FZD hit to Pos 2 using forehand
fzdRallyActionsPosTwoForehand = pcase {
	75: attack -> fzdRallyAttackActionsPosTwoForehand
	77: defense -> fzdRallyDefensiveActionsPosTwoForehand
};

fzdRallyAttackActionsPosTwoForehandFail = pcase {
	7: attFailFHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	3: attFailFHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: attFailFHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	7: attFailFHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosTwoForehandFail = pcase {
	8: defFailFHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	20: defFailFHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailFHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailFHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosTwoForehand = pcase {
	6:  attSuccFHLoop{ball=2} -> mlRallyActions
	12:  attSuccFHDrive{ball=2} -> mlRallyActions
	11:  attSuccFHFlick{ball=2} -> mlRallyActions
	27: attSuccFHSmash{ball=2} -> mlRallyActions
	19: attFailFH{ball=5} -> fzdRallyAttackActionsPosTwoForehandFail
	
};

fzdRallyDefensiveActionsPosTwoForehand = pcase {
	5: defSuccFHBlock{ball=2} -> mlRallyActions
	5: defSuccFHChop{ball=2} -> mlRallyActions
	37: defSuccFHPush{ball=2} -> mlRallyActions
	2: defSuccFHLob{ball=2} -> mlRallyActions
	28: defFailFH{ball=5} -> fzdRallyDefenseActionsPosTwoForehandFail
};

//FZD hit to Pos 2 using backhand
fzdRallyActionsPosTwoBackhand = pcase {
	153: attack -> fzdRallyAttackActionsPosTwoBackhand
	75: defense -> fzdRallyDefensiveActionsPosTwoBackhand
};

fzdRallyAttackActionsPosTwoBackhandFail = pcase {
	6: attFailBHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: attFailBHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosTwoBackhandFail = pcase {
	0: defFailBHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	4: defFailBHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	5: defFailBHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosTwoBackhand = pcase {
	23:  attSuccBHLoop{ball=2} -> mlRallyActions
	18:  attSuccBHDrive{ball=2} -> mlRallyActions
	99:  attSuccBHFlick{ball=2} -> mlRallyActions
	6:  attSuccBHSmash{ball=2} -> mlRallyActions
	7: attackFailBH{ball=5} -> fzdRallyAttackActionsPosTwoBackhandFail
};

fzdRallyDefensiveActionsPosTwoBackhand = pcase {
	14: defSuccBHBlock{ball=2} -> mlRallyActions
	16: defSuccBHChop{ball=2} -> mlRallyActions
	32: defSuccBHPush{ball=2} -> mlRallyActions
	4: defSuccBHLob{ball=2} -> mlRallyActions
	9: defFailBH{ball=5} -> fzdRallyDefenseActionsPosTwoBackhandFail
};

fzdRallyActions = pcase {
	94: PosOneFH -> fzdRallyActionsPosOneForehand
	108: PosOneBH -> fzdRallyActionsPosOneBackhand
	153: PosTwoFH -> fzdRallyActionsPosTwoForehand 
	228: PosTwoBH -> fzdRallyActionsPosTwoBackhand
};

#define malongWins wonGame == ml;
#define fzdWins wonGame == fzd;
#assert MatchPt() deadlockfree;
#assert MatchPt() reaches malongWins;
#assert MatchPt() reaches malongWins with prob;
#assert MatchPt() reaches fzdWins with prob;
