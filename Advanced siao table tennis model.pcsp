#define matchPoint 11;
#define winPoint 4;
var serve_counter = 0;

enum{ml, fzd, na};

var turn = na; //serve turn;
var wonGame = na;
var wonSet = na;

var ball = 5;

// Scores //
var mlScore = 0;
var fzdScore = 0;

// Set points // 
var mlSetPoint = 0;
var fzdSetPoint = 0;

var currSetServer = na;

// High level
MatchPt = [mlSetPoint == 0 && fzdSetPoint == 0] InitiateGame;
InitiateGame = whoServeFirst; (mlServe [] fzdServe);
whoServeFirst = []i:{ml, fzd}@TossCoin{if (i == ml) {turn = ml; serve_counter = 0; currSetServer = ml} else {turn = fzd; serve_counter = 2; currSetServer= fzd;}} -> Skip;

// Low level
////////////////
// RESET HERE (BELOW)
#define setNextServer {if (wonSet == ml) {
			mlSetPoint++;
		} else {
			fzdSetPoint++;
		};
		if (mlSetPoint == winPoint) {
			wonGame = ml;
		} else if (fzdSetPoint == winPoint) {
			wonGame = fzd;
		};
		if (currSetServer == ml) {
			turn = fzd; serve_counter = 2; currSetServer = fzd; wonSet= na;
		} else {
			turn = ml; serve_counter = 0; currSetServer = ml; wonSet = na;
		}
		mlScore = 0; 
		fzdScore = 0;
		};
		
nextSetGame = {setNextServer;} -> if (wonGame != na) {Skip} else if (turn == ml) {mlServe} else {fzdServe};
mlServe = [wonSet == na && (turn == ml) && wonGame == na] mlReady_serve -> mlServeGame;
fzdServe = [wonSet == na && (turn == fzd) && wonGame == na] fzdReady_serve -> fzdServeGame; 
NextPt = if (wonSet != na) {nextSetGame} else if (turn == ml) {mlServe} else {fzdServe};

#define determineSetWinner(i) {if (i == 0 && (fzdScore == matchPoint && fzdScore != mlScore + 1) || (fzdScore > matchPoint && fzdScore - mlScore >= 2)) { // If fzd reach 11 and ML does not reach 10 yet
			wonSet = fzd;
		} else if ((mlScore == matchPoint && fzdScore + 1 != mlScore) || (mlScore > matchPoint && mlScore - fzdScore >= 2)) { // If ml reach 11 and fzd does not reach 10 yet
			wonSet = ml;
		}};
		
#define determineNextServer(i) {call(determineSetWinner, i); if (wonSet == na) {
		if ((fzdScore >= matchPoint - 1 && fzdScore - mlScore < 2) || (mlScore >= matchPoint -1 && mlScore - fzdScore < 2)) {
			if (turn == ml) {
				turn = fzd;
			} else {
				turn = ml;
			}
		}
		else {
			if (serve_counter % 4 == 0 || (serve_counter % 4 == 1) ) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		}};
		
// MA LONG SECTION
//Ma Long Serve Actions
mlServeGame() = pcase{
	11: mlServeActionPosThreeForehand
	0: mlServeActionPosThreeBackhand
	27: mlServeActionPosFourForehand
	4: mlServeActionPosFourBackhand
};

mlServeActionPosThreeForehand = pcase {
	10: serveSuccFHToss{ball = 3; serve_counter++} -> fzdRallyActions
	1: serveSuccFHPend{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccFHBackSpin{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccFHReversePend{ball = 3; serve_counter++} -> fzdRallyActions
	
	0: serveFailFHToss{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHPend{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlServeActionPosThreeBackhand = pcase {
	0: serveSuccBHToss{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccBHPend{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccBHBackSpin{ball = 3; serve_counter++} -> fzdRallyActions
	0: serveSuccBHReversePend{ball = 3; serve_counter++} -> fzdRallyActions
	
	0: serveFailBHToss{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHPend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlServeActionPosFourForehand = pcase {
	25: serveSuccFHToss{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccFHPend{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccFHBackSpin{ball = 4; serve_counter++} -> fzdRallyActions
	2: serveSuccFHReversePend{ball = 4; serve_counter++} -> fzdRallyActions
	
	0: serveFailFHToss{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHPend{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlServeActionPosFourBackhand = pcase {
	4: serveSuccBHToss{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccBHPend{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccBHBackSpin{ball = 4; serve_counter++} -> fzdRallyActions
	0: serveSuccBHReversePend{ball = 4; serve_counter++} -> fzdRallyActions
	
	0: serveFailBHToss{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHPend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHBackSpin{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: serveFailBHReversePend{ball =5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

// Ma Long Rally Actions

//ML hit to Pos 3 using forehand
mlRallyActionsPosThreeForehand = pcase {
	19: attack -> mlRallyAttackActionsPosThreeForehand
	18: defense -> mlRallyDefensiveActionsPosThreeForehand
};

mlRallyAttackActionsPosThreeForehandFail = pcase {
	0: attFailFHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: attFailFHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: attFailFHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: attFailFHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosThreeForehandFail = pcase {
	0: defFailFHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	7: defFailFHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: defFailFHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailFHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosThreeForehand = pcase {
	6: attSuccFHLoop{ball=3} -> fzdRallyActions
	8: attSuccFHDrive{ball=3} -> fzdRallyActions
	1: attSuccFHFlick{ball=3} -> fzdRallyActions
	0: attSuccFHDrive{ball=3} -> fzdRallyActions
	4: mlRallyAttackActionsPosThreeForehandFail
};

mlRallyDefensiveActionsPosThreeForehand = pcase {
	2: defSuccFHBlock{ball=3} -> fzdRallyActions
	4: defSuccFHChop{ball=3} -> fzdRallyActions
	4: defSuccFHPush{ball=3} -> fzdRallyActions
	0: defSuccFHLob{ball=3} -> fzdRallyActions
	8: mlRallyDefensiveActionsPosThreeForehandFail
};

//ML hit to Pos 3 using backhand
mlRallyActionsPosThreeBackhand = pcase {
	50: attack -> mlRallyAttackActionsPosThreeBackhand
	22: defense -> mlRallyDefensiveActionsPosThreeBackhand
};

mlRallyAttackActionsPosThreeBackhandFail = pcase {
	0: attFailBHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: attFailBHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: attFailBHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	1: attFailBHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosThreeBackhandFail = pcase {
	0: defFailBHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailBHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailBHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailBHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosThreeBackhand = pcase {
	12: attSuccBHLoop{ball=3} -> fzdRallyActions
	10: attSuccBHDrive{ball=3} -> fzdRallyActions
	16: attSuccBHFlick{ball=3} -> fzdRallyActions
	0: attSuccBHSmash{ball=3} -> fzdRallyActions
	2: mlRallyAttackActionsPosThreeBackhandFail
};

mlRallyDefensiveActionsPosThreeBackhand = pcase {
	9: defSuccBHChop{ball=3} -> fzdRallyActions
	8: defSuccBHBlock{ball=3} -> fzdRallyActions
	5: defSuccBHPush{ball=3} -> fzdRallyActions
	0: defSuccBHLob{ball=3} -> fzdRallyActions
	0: mlRallyDefensiveActionsPosThreeBackhandFail
};

//ML hit to Pos 4 using forehand
mlRallyActionsPosFourForehand = pcase {
	24: attack -> mlRallyAttackActionsPosFourForehand
	23: defense -> mlRallyDefensiveActionsPosFourForehand
};

mlRallyAttackActionsPosFourForehandFail = pcase {
	1: attFailFHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: attFailFHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	2: attFailFHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	2: attFailFHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosFourForehandFail = pcase {
	0: defFailFHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailFHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	2: defFailFHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailFHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosFourForehand = pcase {
	6: attSuccFHLoop{ball=4} -> fzdRallyActions
	3: attSuccFHDrive{ball=4} -> fzdRallyActions
	4: attSuccFHFlick{ball=4} -> fzdRallyActions
	3: attSuccFHSmash{ball=4} -> fzdRallyActions
	8: attFailFH{ball=5} -> mlRallyAttackActionsPosFourForehandFail
};

mlRallyDefensiveActionsPosFourForehand = pcase {
	10: defSuccFHBlock{ball=4} -> fzdRallyActions
	2: defSuccFHChop{ball=4} -> fzdRallyActions
	9: defSuccFHPush{ball=4} -> fzdRallyActions
	0: defSuccFHLob{ball=4} -> fzdRallyActions
	2: defFailFH{ball=5} -> mlRallyDefensiveActionsPosFourForehandFail
};

//ML hit to Pos 4 using backhand
mlRallyActionsPosFourBackhand = pcase {
	17: attack -> mlRallyAttackActionsPosFourBackhand
	21: defense -> mlRallyDefensiveActionsPosFourBackhand
};

mlRallyAttackActionsPosFourBackhandFail = pcase {
	2: attFailBHLoop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	4: attFailBHFlick{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: attFailBHSmash{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	2: attFailBHDrive{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyDefensiveActionsPosFourBackhandFail = pcase {
	0: defFailFHPush{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: defFailFHBlock{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	3: defFailFHChop{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
	0: defFailFHLob{ball=5} -> {fzdScore++; call(determineNextServer, 0);} -> NextPt
};

mlRallyAttackActionsPosFourBackhand = pcase {
	6:  attSuccBHLoop{ball=4} -> fzdRallyActions
	2:  attSuccBHFlick{ball=4} -> fzdRallyActions
	1:  attSuccBHSmash{ball=4} -> fzdRallyActions
	0:  attSuccBHDrive{ball=4} -> fzdRallyActions
	8: attFailBH{ball=5} -> mlRallyAttackActionsPosFourBackhandFail
};

mlRallyDefensiveActionsPosFourBackhand = pcase {
	4: defSuccBHChop{ball=4} -> fzdRallyActions
	6: defSuccBHBlock{ball=4} -> fzdRallyActions
	5: defSuccBHPush{ball=4} -> fzdRallyActions
	0: defSuccBHLob{ball=4} -> fzdRallyActions
	6: defFailBH{ball=5} -> mlRallyDefensiveActionsPosFourBackhandFail
};

mlRallyActions = pcase {
	27: PosThree -> mlRallyActionsPosThreeForehand
	72: PosThree -> mlRallyActionsPosThreeBackhand
	47: PosFour -> mlRallyActionsPosFourForehand
	38: PosFour -> mlRallyActionsPosFourBackhand
};

// ZE DONG SECTION
// Ze Dong Serve Actions
fzdServeGame() = pcase{
	20: fzdServeActionsPosOneForehand
	0: fzdServeActionsPosOneBackhand
	25: fzdServeActionsPosTwoForehand
	0: fzdServeActionsPosTwoBackhand
};

fzdServeActionsPosOneForehand = pcase {
	0: serveSuccFHToss{ball = 1; serve_counter++} -> mlRallyActions
	9: serveSuccFHReversePend{ball = 1; serve_counter++} -> mlRallyActions
	8: serveSuccFHPend{ball = 1; serve_counter++} -> mlRallyActions
	3: serveSuccFHBackSpin{ball = 1; serve_counter++} -> mlRallyActions
	
	0: serveFailFHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdServeActionsPosOneBackhand = pcase {
	0: serveSuccBHToss{ball = 1; serve_counter++} -> mlRallyActions
	0: serveSuccBHReversePend{ball = 1; serve_counter++} -> mlRallyActions
	0: serveSuccBHPend{ball = 1; serve_counter++} -> mlRallyActions
	0: serveSuccBHBackSpin{ball = 1; serve_counter++} -> mlRallyActions
	
	0: serveFailBHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHBackSpin{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHReversePend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdServeActionsPosTwoForehand = pcase {
	0: serveSuccFHToss{ball = 2; serve_counter++} -> mlRallyActions
	13: serveSuccFHReversePend{ball = 2; serve_counter++} -> mlRallyActions
	11: serveSuccFHPend{ball = 2; serve_counter++} -> mlRallyActions
	3: serveSuccFHBackSpin{ball = 2; serve_counter++} -> mlRallyActions
	
	0: serveFailFHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHBackSpin{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailFHReversePend{ball =5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdServeActionsPosTwoBackhand = pcase {
	0: serveSuccBHToss{ball = 2; serve_counter++} -> mlRallyActions
	0: serveSuccBHReversePend{ball = 2; serve_counter++} -> mlRallyActions
	0: serveSuccBHPend{ball = 2; serve_counter++} -> mlRallyActions
	0: serveSuccBHBackSpin{ball = 2; serve_counter++} -> mlRallyActions
	
	0: serveFailBHToss{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHPend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHBackSpin{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: serveFailBHReversePend{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

//FZD hit to Pos 1 using forehand
fzdRallyActionsPosOneForehand = pcase {
	17: attack -> fzdRallyAttackActionsPosOneForehand
	11: defense -> fzdRallyDefensiveActionsPosOneForehand
};

fzdRallyAttackActionsPosOneForehandFail = pcase {
	2: attFailFHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: attFailFHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: attFailFHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: attFailFHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosOneForehandFail = pcase {
	1: defFailBHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosOneForehand = pcase {
	7:  attSuccFHLoop{ball=1} -> mlRallyActions
	3:  attSuccFHDrive{ball=1} -> mlRallyActions
	2:  attSuccFHFlick{ball=1} -> mlRallyActions
	4:  attSuccFHSmash{ball=1} -> mlRallyActions
	9: attFailFH{ball=5} -> fzdRallyAttackActionsPosOneForehandFail
};

fzdRallyDefensiveActionsPosOneForehand = pcase {
	1: defSuccFHBlock{ball=1} -> mlRallyActions
	2: defSuccFHChop{ball=1} -> mlRallyActions
	6: defSuccFHPush{ball=1} -> mlRallyActions
	1: defSuccFHLob{ball=1} -> mlRallyActions
	1: defFailFH{ball=5} -> fzdRallyDefenseActionsPosOneForehandFail
};

//FZD hit to Pos 1 using backhand
fzdRallyActionsPosOneBackhand = pcase {
	38: attack -> fzdRallyAttackActionsPosOneBackhand
	27: defense -> fzdRallyDefensiveActionsPosOneBackhand
};

fzdRallyAttackActionsPosOneBackhandFail = pcase {
	7: attFailBHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	3: attFailBHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: attFailBHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosOneBackhandFail = pcase {
	4: defFailBHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: defFailBHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: defFailBHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosOneBackhand = pcase {
	5:  attSuccBHLoop{ball=1} -> mlRallyActions
	5:  attSuccBHDrive{ball=1} -> mlRallyActions
	17:  attSuccBHFlick{ball=1} -> mlRallyActions
	0:  attSuccBHSmash{ball=1} -> mlRallyActions
	11: attFailBH{ball=5} -> fzdRallyAttackActionsPosOneBackhandFail
};

fzdRallyDefensiveActionsPosOneBackhand = pcase {
	0: defSuccBHBlock{ball=1} -> mlRallyActions
	1: defSuccBHChop{ball=1} -> mlRallyActions
	5: defSuccBHPush{ball=1} -> mlRallyActions
	0: defSuccBHLob{ball=1} -> mlRallyActions
	7: defFailBH{ball=5} -> fzdRallyDefenseActionsPosOneBackhandFail
};

//FZD hit to Pos 2 using forehand
fzdRallyActionsPosTwoForehand = pcase {
	31: attack -> fzdRallyAttackActionsPosTwoForehand
	20: defense -> fzdRallyDefensiveActionsPosTwoForehand
};

fzdRallyAttackActionsPosTwoForehandFail = pcase {
	3: attFailFHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: attFailFHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: attFailFHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	3: attFailFHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosTwoForehandFail = pcase {
	4: defFailFHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	6: defFailFHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailFHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailFHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosTwoForehand = pcase {
	2:  attSuccFHLoop{ball=2} -> mlRallyActions
	5:  attSuccFHDrive{ball=2} -> mlRallyActions
	5:  attSuccFHFlick{ball=2} -> mlRallyActions
	11: attSuccFHSmash{ball=2} -> mlRallyActions
	8: attFailFH{ball=5} -> fzdRallyAttackActionsPosTwoForehandFail
	
};

fzdRallyDefensiveActionsPosTwoForehand = pcase {
	1: defSuccFHBlock{ball=2} -> mlRallyActions
	2: defSuccFHChop{ball=2} -> mlRallyActions
	6: defSuccFHPush{ball=2} -> mlRallyActions
	1: defSuccFHLob{ball=2} -> mlRallyActions
	10: defFailFH{ball=5} -> fzdRallyDefenseActionsPosTwoForehandFail
};

//FZD hit to Pos 2 using backhand
fzdRallyActionsPosTwoBackhand = pcase {
	50: attack -> fzdRallyAttackActionsPosTwoBackhand
	19: defense -> fzdRallyDefensiveActionsPosTwoBackhand
};

fzdRallyAttackActionsPosTwoBackhandFail = pcase {
	2: attFailBHFlick{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHLoop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHDrive{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: attFailBHSmash{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyDefenseActionsPosTwoBackhandFail = pcase {
	0: defFailBHPush{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	1: defFailBHBlock{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	2: defFailBHChop{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
	0: defFailBHLob{ball=5} -> {mlScore++; call(determineNextServer, 1);} -> NextPt
};

fzdRallyAttackActionsPosTwoBackhand = pcase {
	9:  attSuccBHLoop{ball=2} -> mlRallyActions
	7:  attSuccBHDrive{ball=2} -> mlRallyActions
	29:  attSuccBHFlick{ball=2} -> mlRallyActions
	3:  attSuccBHSmash{ball=2} -> mlRallyActions
	2: attackFailBH{ball=5} -> fzdRallyAttackActionsPosTwoBackhandFail
};

fzdRallyDefensiveActionsPosTwoBackhand = pcase {
	1: defSuccBHBlock{ball=2} -> mlRallyActions
	8: defSuccBHChop{ball=2} -> mlRallyActions
	6: defSuccBHPush{ball=2} -> mlRallyActions
	1: defSuccBHLob{ball=2} -> mlRallyActions
	3: defFailBH{ball=5} -> fzdRallyDefenseActionsPosTwoBackhandFail
};

fzdRallyActions = pcase {
	28: PosOneFH -> fzdRallyActionsPosOneForehand
	65: PosOneBH -> fzdRallyActionsPosOneBackhand
	51: PosTwoFH -> fzdRallyActionsPosTwoForehand 
	69: PosTwoFH -> fzdRallyActionsPosTwoBackhand
};

#define malongWins wonGame == ml;
#define fzdWins wonGame == fzd;
#assert MatchPt() deadlockfree;
#assert MatchPt() reaches malongWins;
#assert MatchPt() reaches malongWins with prob;
#assert MatchPt() reaches fzdWins with prob;
