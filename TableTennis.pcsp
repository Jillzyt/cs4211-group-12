
#define matchPoint 11;
#define winPoint 4;
var serve_counter = 0;

enum{ml, fzd, na};

var turn = na; //serve turn;
var wonGame = na;
var wonSet = na;

var ball = 5;

// Scores //
var mlScore = 0;
var fzdScore = 0;

// Set points // 
var mlSetPoint = 0;
var fzdSetPoint = 0;

var currSetServer = na;

// High level
MatchPt = [mlSetPoint == 0 && fzdSetPoint == 0] TieBreakGame; [mlSetPoint != winPoint && fzdSetPoint != winPoint] nextSetGame;


// Low level
TieBreakGame = whoServeFirst; (mlServe [] fzdServe);
whoServeFirst = []i:{ml, fzd}@TossCoin{if (i == ml) {turn = 0; serve_counter = 0; currSetServer = ml} else {turn = 2; serve_counter = 2; currSetServer= fzd;}} -> Skip;

////////////////
// RESET HERE (BELOW)
setNextServer = []i:{ml, fzd}@TossCoin{if (wonSet == ml) {mlSetPoint++;} else {fzdSetPoint++;};
        if (mlSetPoint == winPoint) {wonGame = ml;} else if (fzdSetPoint == winPoint){wonGame = fzd;};
				if (currSetServer == ml) {turn = 2; serve_counter = 2; currSetServer = fzd; wonSet= na;} else {turn = 0; serve_counter = 0; currSetServer = ml; wonSet = na;} mlScore = 0; fzdScore = 0;} -> Skip;

nextSetGame = setNextServer; (mlServe [] fzdServe) [] ([wonGame != na] GameOver -> Skip);


mlServe = [wonSet == na && (turn == 0) && wonGame == na] mlReady_serve -> mlServeGame [] [ wonSet == na && (turn == 1) && wonGame == na] mlReady_serve -> mlServeGame;
fzdServe = [wonSet == na && (turn == 2) && wonGame == na] fzdReady_serve -> fzdServeGame [] [ wonSet == na && (turn == 3) && wonGame == na] fzdReady_serve-> fzdServeGame;

NextPt = mlServe [] fzdServe [] [wonSet != na] ready_nextGame -> nextSetGame;

// MA LONG SECTION

//Ma Long Serve Actions
mlServeGame() = pcase{
	56: serveSuccFH{ball = 2; serve_counter++} -> fzdRallyActions
	44: serveSuccFH{ball = 1; serve_counter++} -> fzdRallyActions
	0: serveFailFH{ball = 2} -> {fzdScore++; if (fzdScore == matchPoint && fzdScore != mlScore + 1) {// If fzd reach 11 and ML does not reach 10 yet
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore >= 2) { // If fzd has more than 11 and at least more than 2 than ML
			wonSet = fzd;
		}
		else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}} -> NextPt
		
	0: serveFailFH{ball =1} -> {fzdScore++; if (fzdScore == matchPoint && fzdScore != mlScore + 1) {// If fzd reach 11 and ML does not reach 10 yet
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore >= 2) { // If fzd has more than 11 and at least more than 2 than ML
			wonSet = fzd;
		}
		else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}} -> NextPt
};

// Ma Long Rally Actions
mlRallyActions = pcase {
	12: defenseSuccBH{ball=3} -> fzdRallyActions
	8:  defenseSuccBH{ball=4} -> fzdRallyActions
	13: defenseSuccFH{ball=3} -> fzdRallyActions
	6:  defenseSuccFH{ball=4} -> fzdRallyActions
	7:  attackSuccFH{ball=3} -> fzdRallyActions
	7:  attackSuccFH{ball=4} -> fzdRallyActions
	21: attackSuccBH{ball=3} -> fzdRallyActions
	5:  attackSuccBH{ball=4} -> fzdRallyActions
	4:  defenseFailBH{ball=5} -> {fzdScore++; if (fzdScore == matchPoint && fzdScore != mlScore + 1) {// If fzd reach 11 and ml does not reach 10 yet
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore >= 2) { // If fzd has more than 11 and at least more than 2 than ML
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
	6: defenseFailFH{ball = 5} -> {fzdScore++; if (fzdScore == matchPoint && fzdScore != mlScore + 1) {// If fzd reach 11 and ml does not reach 10 yet
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore >= 2) { // If fzd has more than 11 and at least more than 2 than ML
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
	6: attackFailFH{ball=5} -> {fzdScore++; if (fzdScore == matchPoint && fzdScore != mlScore + 1) {// If fzd reach 11 and ml does not reach 10 yet
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore >= 2) { // If fzd has more than 11 and at least more than 2 than ML
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
	5: attackFailBH{ball=5} -> {fzdScore++; if (fzdScore == matchPoint && fzdScore != mlScore + 1) {// If fzd reach 11 and ml does not reach 10 yet
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore >= 2) { // If fzd has more than 11 and at least more than 2 than ML
			wonSet = fzd;
		} else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
};

// ZE DONG SECTION

// Ze Dong Serve Actions
fzdServeGame() = pcase{
	56: serveSuccFH{ball = 2; serve_counter++} -> mlRallyActions
	44: serveSuccFH{ball = 1; serve_counter++} -> mlRallyActions
	0: serveFailFH{ball = 2} -> {mlScore++; if (mlScore == matchPoint && fzdScore + 1 != mlScore) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore >= 2) {
			wonSet = ml;
		}else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}} -> NextPt
	0: serveFailFH{ball=1} -> {mlScore++; if (mlScore == matchPoint && fzdScore + 1 != mlScore) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore >= 2) {
			wonSet = ml;
		}else if (fzdScore > matchPoint && fzdScore - mlScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}} -> NextPt
};

fzdRallyActions = pcase {
	3: defenseSuccBH{ball = 1} -> mlRallyActions
	8: defenseSuccBH{ball = 2} -> mlRallyActions
	8: defenseSuccFH{ball = 1} -> mlRallyActions
	6: defenseSuccFH{ball = 2} -> mlRallyActions
	8: attackSuccFH{ball = 1} -> mlRallyActions
	12: attackSuccFH{ball = 2} -> mlRallyActions
	4: attackSuccBH{ball = 1} -> mlRallyActions
	25: attackSuccBH{ball = 2} -> mlRallyActions
	6: defenseFailBH{ball = 5} -> {mlScore++; if (mlScore == matchPoint && fzdScore + 1 != mlScore) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore >= 2) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
	6: defenseFailFH{ball=5} -> {mlScore++; if (mlScore == matchPoint && fzdScore + 1 != mlScore) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore >= 2) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
	8: attackFailFH{ball=5} -> {mlScore++; if (mlScore == matchPoint && fzdScore + 1 != mlScore) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore >= 2) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
	6: attackFailBH{ball=5} -> {mlScore++; if (mlScore == matchPoint && fzdScore + 1 != mlScore) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore >= 2) {
			wonSet = ml;
		} else if (mlScore > matchPoint && mlScore - fzdScore < 2) {
			serve_counter++;
			if (serve_counter % 2 == 0) {
				turn = ml;
			} else {
				turn = fzd;
			}
		}
		else {
			if (serve_counter % 4 == 0) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 1) {
				serve_counter++;
				turn = ml;
			} else if (serve_counter % 4 == 2) {
				serve_counter++;
				turn = fzd;
			} else if (serve_counter % 4 == 3) {
				serve_counter++;
				turn = fzd;
			}
		}} -> NextPt
};
#define player1Win mlSetPoint == winPoint;
#define player2Win fzdSetPoint == winPoint;
#assert MatchPt reaches player1Win with prob;
//#define malongWins wonSet == ml;
//#define fzdWins wonSet == fzd;
//#assert TieBreakGame deadlockfree;
//#assert TieBreakGame reaches malongWins with prob;
//#assert TieBreakGame reaches fzdWins with prob;